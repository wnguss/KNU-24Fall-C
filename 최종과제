#include <conio.h> 
#include <stdio.h> 
#include <stdlib.h> 
#include <io.h> 
#include <Windows.h>

int i, j, height = 20, width = 20;
int gameover, score;
int x, y, fruitx, fruity, flag;
int flag_div, x_div, y_div, div_snake = 0; // 분할 뱀
int item_mapx, item_mapy, item_divx, item_divy, item_halfx, item_halfy; // 아이템
int tailX[100], tailY[100], tailX_div[100], tailY_div[100];  // 뱀의 몸통 좌표 배열
int length, length_div;  // 뱀의 길이
int choose_map; // 맵 선택을 위한 변수
int width_rand[11]; // 2번 맵에서 랜덤 할당을 위한 길이 변수
int height_rand[11]; // 2번 맵에서 랜덤 할당을 위한 높이 변수
int easy_score[10] = { 0 }, normal_score[10] = { 0 }, hard_score[10] = { 0 }; // 랭킹을 위한 스코어 배열
int order; // 로비에서 명령을 받기 위한 변수
int choose_mode; // 모드를 선택하기 위한 변수

// Function to generate the fruit 
// within the boundary 
void setup()
{
    // 난이도 쉬움 
    if (choose_mode == 1) {
        height = 28, width = 28;
        x = height / 2 - 5;
        y = width / 2 - 5;
    }
    // 난이도 보통 
    if (choose_mode == 2) {
        height = 20, width = 20;
        x = height / 2;
        y = width / 2;
    }
    // 난이도 어려움
    if (choose_mode == 3) {
        height = 20, width = 20;
        x = height / 2;
        y = width / 2;

        // 맵 줄이는 아이템 생성
        item_mapx = 0;
        while (item_mapx == 0) {
            item_mapx = rand() % height;
        }

        item_mapy = 0;
        while (item_mapy == 0) {
            item_mapy = rand() % width;
        }

        // 분할 아이템 생성
        item_divx = 0;
        while (item_divx == 0) {
            item_divx = rand() % height;
        }

        item_divy = 0;
        while (item_divy == 0) {
            item_divy = rand() % width;
        }
    }

    gameover = 0;

    length = 0;

    int k = 0; // 만약 랜덤 #이 벽에 생성되면 다시 실행
    while (k <= 10) {
        if (width_rand[k] == width || height_rand[k] == height) {
            continue;
        }
        else {
            width_rand[k] = rand() % width;
            height_rand[k] = rand() % height;
            k++;
        }
    }

    flag = 0; //다시 맵을 켰을 때 방향 초기화

    fruitx = 0; // 과일이 벽에 생성되면 다시 실행
    while (fruitx == width || fruitx == 0) {
        fruitx = rand() % 20;
    }

    fruity = 0;
    while (fruity == height || fruity == 0) {
        fruity = rand() % 20;
    }


    // 꼬리 절반 줄이는 아이템 생성
    item_halfx = 0;
    while (item_halfx == 0) {
        item_halfx = rand() % height;
    }

    item_halfy = 0;
    while (item_halfy == 0) {
        item_halfy = rand() % width;
    }

    check_fruits(fruitx, fruity); // 과일을 검사하는 함수 실행

    score = 0;
}

// Function to draw the boundaries 
void draw_map1() { // 맵 1 함수
    system("cls");
    for (i = 0; i < height; i++) {
        for (j = 0; j < width; j++) { // 중간에 벽 생성을 위한 if 조건문
            if (i == 0 || i == height - 1 || j == 0 || j == width - 1 || (j == width / 2 && !((i > 0 && i < 4) || (i > height - 5 && i < height - 1)))) {
                printf("#");
            }
            else {
                int isSnakePart = 0;
                for (int k = 0; k < length; k++) {
                    if (tailX[k] == i && tailY[k] == j) {
                        printf("□"); // 뱀의 모양 생성
                        isSnakePart = 1;
                        break;
                    }
                }

                if (!isSnakePart) {
                    if (i == x && j == y)
                        printf("□");
                    else if (i == fruitx && j == fruity)
                        printf("*");
                    else if (choose_mode == 3 && i == item_mapx && j == item_mapy) // 맵 줄이기 아이템
                        printf("▣");
                    else if (i == item_halfx && j == item_halfy) // 꼬리 절반 줄이기 아이템
                        printf("♥");
                    else if (choose_mode == 3 && i == item_divx && j == item_divy) // 분할 아이템
                        printf("↔");
                    else
                        printf(" ");
                }
            }
        }
        printf("\n");
    }

    printf("score = %d", score);
    printf("\n");
    printf("press X to quit the game\n");
}

void draw_map2() { // 맵 2 함수
    system("cls");
    for (i = 0; i < height; i++) {
        for (j = 0; j < width; j++) {
            int rand_tile = 0; // 랜덤 #을 생성을 판단하기 위한 변수

            for (int k = 0; k < 10; k++) {
                if (i == width_rand[k] && j == height_rand[k]) { // 랜덤 x, y 좌표 판단
                    rand_tile = 1;
                    break;
                }
            }

            if (i == 0 || i == width - 1 || j == 0 || j == height - 1 || rand_tile) { // 벽 및 랜덤 위치에 # 출력
                printf("#");
            }
            else {
                int isSnakePart = 0;
                for (int k = 0; k < length; k++) {
                    if (tailX[k] == i && tailY[k] == j) {
                        printf("□");
                        isSnakePart = 1;
                        break;
                    }
                }

                if (!isSnakePart) {
                    if (i == x && j == y)
                        printf("□");
                    else if (i == fruitx && j == fruity)
                        printf("*");
                    else if (choose_mode == 3 && i == item_mapx && j == item_mapy) // 맵 줄이기 아이템
                        printf("▣");
                    else if (i == item_halfx && j == item_halfy) // 꼬리 절반 줄이기 아이템
                        printf("♥");
                    else if (choose_mode == 3 && i == item_divx && j == item_divy) // 분할 아이템
                        printf("↔");
                    else
                        printf(" ");
                }
            }
        }
        printf("\n");
    }

    printf("score = %d", score);
    printf("\n");
    printf("press X to quit the game\n");
}

void draw_default() { // 기본 맵 함수
    system("cls");
    for (i = 0; i < height; i++) {
        for (j = 0; j < width; j++) {
            if (i == 0 || i == width - 1 || j == 0 || j == height - 1) { // 기본적인 벽 생성
                printf("#");
            }
            else {
                int isSnakePart = 0;
                for (int k = 0; k < length; k++) {
                    if (tailX[k] == i && tailY[k] == j) {
                        printf("□");
                        isSnakePart = 1;
                        break;
                    }
                }

                if (!isSnakePart) {
                    if (i == x && j == y)
                        printf("□");
                    else if (i == fruitx && j == fruity)
                        printf("*");
                    else if (choose_mode == 3 && i == item_mapx && j == item_mapy) // 맵 줄이기 아이템
                        printf("▣");
                    else if (i == item_halfx && j == item_halfy) // 꼬리 절반 줄이기 아이템
                        printf("♥");
                    else if (choose_mode == 3 && i == item_divx && j == item_divy) // 분할 아이템
                        printf("↔");
                    else
                        printf(" ");
                }
            }
        }
        printf("\n");
    }

    printf("score = %d", score);
    printf("\n");
    printf("press X to quit the game\n");
}

void draw_div() // 분할 뱀 그리지
{
    system("cls");

    for (i = 0; i < height; i++) {
        for (j = 0; j < width; j++) {
            if (i == 0 || i == width - 1 || j == 0 || j == height - 1) {
                printf("#");
            }
            else {
                // 뱀의 몸통을 그리기
                int isSnakePart = 0;
                for (int k = 0; k < length; k++) {
                    if (tailX[k] == i && tailY[k] == j) {
                        printf("■");
                        isSnakePart = 1;
                        break;
                    }
                }

                if (!isSnakePart) {
                    if (i == x && j == y)  // 머리
                        printf("■");
                    else if (i == fruitx && j == fruity)  // 과일
                        printf("*");
                    else
                        printf(" ");
                }
            }
        }
        printf("\n");
    }

    // 점수 출력
    printf("score = %d", score);
    printf("\n");
    printf("press X to quit the game");
}

// Function to take the input 
void input()
{
    if (_kbhit()) {
        switch (getch()) {
        case 'a':
            flag = 1;
            break;
        case 's':
            flag = 2;
            break;
        case 'd':
            flag = 3;
            break;
        case 'w':
            flag = 4;
            break;
        case 'x':
            gameover = 1;
            break;
        }
    }

}

void input_div() // 분할 뱀의 동작
{
    if (_kbhit()) {
        switch (getch()) {
        case '4':
            flag = 1;
            break;
        case '5':
            flag = 2;
            break;
        case '6':
            flag = 3;
            break;
        case '8':
            flag = 4;
            break;
        case 'x':
            gameover = 1;
            break;
        }
    }
}

void logic_div() // 분할 뱀의 로직
{
    int prevX_div = tailX_div[0];
    int prevY_div = tailY_div[0];
    int prev2X_div, prev2Y_div;
    tailX_div[0] = x;
    tailY_div[0] = y;

    for (int j = 1; j < length; j++) {
        prev2X_div = tailX_div[j];
        prev2Y_div = tailY_div[j];
        tailX_div[j] = prevX_div;
        tailY_div[j] = prevY_div;
        prevX_div = prev2X_div;
        prevY_div = prev2Y_div;
    }

    switch (flag_div) {
    case 1:
        y_div--;
        break;
    case 2:
        x_div++;
        break;
    case 3:
        y_div++;
        break;
    case 4:
        x_div--;
        break;
    default:
        break;
    }



    // 분할 뱀의 벽과 충돌 확인
    if (x_div < 0 || x_div >= height || y_div < 0 || y_div >= width)
        gameover = 1;

    if (choose_map == 1) {
        if (y_div == width / 2 && !(x_div > 0 && x_div < 4) && !(x_div > height - 5 && x_div < height - 1)) {
            gameover = 1;
        }
    }

    if (choose_map == 2) {
        for (int i = 0; i <= 10; i++) {
            if (x_div == width_rand[i] && y_div == height_rand[i])
                gameover = 1;
        }
    }

    // 분할 뱀의 자기 자신과 충돌 확인
    for (int j = 0; j < length; j++) {
        if (tailX_div[j] == x_div && tailY_div[j] == y_div) {
            gameover = 1;
        }
    }

    // 분할 뱀이 과일을 먹었을 때
    if (x_div == fruitx && y_div == fruity) {
        score += 10;
        if (choose_mode == 1) {
            score += 10;
        }
        length_div++;  // 뱀 길이 증가

        // 새로운 과일 위치 설정
        fruitx = 0;
        while (fruitx == 0) {
            fruitx = rand() % 20;
        }

        fruity = 0;
        while (fruity == 0) {
            fruity = rand() % 20;
        }
    }
    // 맵 줄이기 아이템 먹었을 때
    if (x_div == item_mapx && y_div == item_mapy) {
        height = 16, width = 16;

        item_mapx = 0;
        item_mapy = 0;
    }
    // 꼬리 절반 줄이는 아이템 먹었을 때
    if (x_div == item_halfx && y_div == item_halfy) {
        length = length / 2;

        item_halfx = 0;
        item_halfy = 0;
    }

    // 점수가 200의 배수일 때 꼬리 절반 줄이는 아이템 생성
    if (score % 200 == 0 && item_halfx == 0 && item_halfy == 0) {
        item_halfx = rand() % height;
        item_halfy = rand() % width;
    }
}


// Function for the logic behind each movement
void logic()
{
    int prevX = tailX[0];
    int prevY = tailY[0];
    int prev2X, prev2Y;
    tailX[0] = x;
    tailY[0] = y;

    for (int i = 1; i < length; i++) {
        prev2X = tailX[i];
        prev2Y = tailY[i];
        tailX[i] = prevX;
        tailY[i] = prevY;
        prevX = prev2X;
        prevY = prev2Y;
    }

    switch (flag) {
    case 1:
        y--;
        break;
    case 2:
        x++;
        break;
    case 3:
        y++;
        break;
    case 4:
        x--;
        break;
    default:
        break;
    }

    if (x <= 0 || x >= height - 1 || y <= 0 || y >= width - 1) // 기본 사망 조건
        gameover = 1;

    if (choose_map == 1) { // 가운데 벽에 닿았을 때 사망 조건
        if (y == width / 2 && !(x > 0 && x < 4) && !(x > height - 5 && x < height - 1)) {
            gameover = 1;
        }
    }

    if (choose_map == 2) { // 랜덤 벽에 닿았을 때 사망 조건
        for (int i = 0; i <= 10; i++) {
            if (x == width_rand[i] && y == height_rand[i])
                gameover = 1;
        }
    }

    for (int i = 0; i < length; i++) { // 본인 몸에 닿았을 때 사망 조건
        if (tailX[i] == x && tailY[i] == y) {
            gameover = 1;
        }
    }

    if (gameover == 1) { // 난이도 별로 스코어 정렬
        if (choose_mode == 1) {
            int i;
            for (i = 0; i < 10; i++) {
                if (score > easy_score[i]) {
                    for (int j = 9; j > i; j--) {
                        easy_score[j] = easy_score[j - 1];
                    }
                    easy_score[i] = score;
                    break;
                }
            }
        }
        else if (choose_mode == 2) {
            int i;
            for (i = 0; i < 10; i++) {
                if (score > normal_score[i]) {
                    for (int j = 9; j > i; j--) {
                        normal_score[j] = normal_score[j - 1];
                    }
                    normal_score[i] = score;
                    break;
                }
            }
        }
        else {
            int i;
            for (i = 0; i < 10; i++) {
                if (score > hard_score[i]) {
                    for (int j = 9; j > i; j--) {
                        hard_score[j] = hard_score[j - 1];
                    }
                    hard_score[i] = score;
                    break;
                }
            }
        }


    }

    if (x == fruitx && y == fruity) {

        fruitx = 0;
        while (fruitx == width || fruitx == 0) {
            fruitx = rand() % 20;
        }

        fruity = 0;
        while (fruity == height || fruity == 0) {
            fruity = rand() % 20;
        }

        score += 10;
        if (choose_mode == 1) {
            score += 10;
        }
        length++;
    }

    check_fruits(fruitx, fruity);

    // 맵 줄이기 아이템 먹었을 때
    if (x == item_mapx && y == item_mapy) {
        height = 16, width = 16;

        item_mapx = 0;
        item_mapy = 0;
    }
    // 꼬리 절반 줄이는 아이템 먹었을 때
    if (x == item_halfx && y == item_halfy) {
        length = length / 2;

        item_halfx = 0;
        item_halfy = 0;
    }

    // 점수가 200의 배수일 때 꼬리 절반 줄이는 아이템 생성
    if (score % 200 == 0 && item_halfx == 0 && item_halfy == 0) {
        item_halfx = rand() % height;
        item_halfy = rand() % width;
    }

    if (x == item_divx && y == item_divy) {
        draw_div();
        input_div();
        logic_div();
    }
}


void ranking() { // 랭킹 함수
    int rank;
    printf("1 : easy 랭킹\n2 : normal 랭킹\n3 : hard 랭킹\n선택 : ");
    scanf_s("%d", &rank, sizeof(rank));

    if (rank == 1) { // 선택한 랭킹을 출력
        for (int i = 0; i < 10; i++) {
            if (easy_score[i] != 0) {
                printf("%d등 : %d점\n", i + 1, easy_score[i]);
            }
        }
    }
    else if (rank == 2) {
        for (int i = 0; i < 10; i++) {
            if (normal_score[i] != 0) {
                printf("%d등 : %d점\n", i + 1, normal_score[i]);
            }
        }
    }
    else if (rank == 3) {
        for (int i = 0; i < 10; i++) {
            if (hard_score[i] != 0) {
                printf("%d등 : %d점\n", i + 1, hard_score[i]);
            }
        }
    }
    else {
        printf("잘못된 선택입니다.\n");
    }
}

void mode() { // 난이도 함수
    printf("난이도 설정.\n");
    printf("1. 쉬움\n");
    printf("2. 보통\n");
    printf("3.어려움\n");
    while (1) {
        printf("원하는 난이도를 선택하세요 : ");
        scanf_s("%d", &choose_mode);
        if (choose_mode == 1) { // 난이도 별로 출력 및 break
            printf("쉬움 난이도 선택\n");
            Sleep(300);
            break;
        }
        else if (choose_mode == 2) {
            printf("보통 난이도 선택\n");
            Sleep(300);
            break;
        }
        else if (choose_mode == 3) {
            printf("어려움 난이도 선택\n");
            Sleep(300);
            break;
        }
        else {
            printf("잘못된 입력입니다.\n");
        }
    }
}

int check_fruits(fruitx, fruity) { // 열매가 벽에 생성되는지 확인

    if (choose_map == 1) { // 각 맵 조건 별로 확인
        while (fruitx == width || fruity == height || fruitx == 0 || fruity == 0 || fruitx == (y == width / 2 && !(x > 0 && x < 4) && !(x > height - 5 && x < height - 1)) ||
            fruity == (y == width / 2 && !(x > 0 && x < 4) && !(x > height - 5 && x < height - 1))) {
            fruitx = 0;
            fruitx = rand() % 20;

            fruity = 0;
            fruity = rand() % 20;
        }
    }

    if (choose_map == 2) {
        for (int i = 0; i <= 10; i++) {
            while ((fruitx != width_rand[i] && fruity != height_rand[i]) || fruitx == 0 || fruity == 0 || fruitx == width || fruity == height) {
                fruitx = 0;
                fruitx = rand() % 20;

                fruity = 0;
                fruity = rand() % 20;
            }
        }
    }

    return fruitx, fruity;
}

void lobby() { // 로비 함수
    printf("ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ로비ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n");
    printf("맵 선택 1번, 난이도 선택 2번, 랭킹 3번, 시작 4번, 종료 5번\n");
    printf("ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n");
    printf(">> ");
    scanf_s("%d", &order);

    if (order == 1) { // 명령 별로 내용 실행
        printf("맵을 선택하세요. (1, 2, 3) : ");
        scanf_s("%d", &choose_map);
        lobby();
    }
    else if (order == 2) {
        mode();
        lobby();
    }
    else if (order == 3) {
        ranking();
        lobby();
    }
    else if (order == 4) {
        printf("Loading...\n");
    }
    else if (order == 5) {
        printf("게임 종료\n");
    }
    else {
        printf("잘못된 입력입니다.\n");
    }
}

void main()
{
    int k = 0;

    while (order != 5) { // 로비에서 종료하기 전까지 반복

        srand(time(NULL)); // 2번 맵 랜덤 매 라운드 변경

        lobby();

        if (order == 5)
            break;

        if (order == 4) { // 로비에서 4번 입력 시 돌입
            setup();

            if (choose_map == 1) { // 각 맵 실행
                while (!gameover) {
                    draw_map1();
                    input();
                    logic();
                    Sleep(100);
                }
            }
            else if (choose_map == 2) {
                while (!gameover) {
                    draw_map2();
                    input();
                    logic();
                    Sleep(100);
                }
            }
            else if (choose_map == 3) {
                while (!gameover) {
                    draw_default();
                    input();
                    logic();
                    Sleep(100);
                }
            }
            else
                printf("해당 맵은 존재하지 않습니다.\n");
        }
    }
}
