#include <conio.h> 
#include <stdio.h> 
#include <stdlib.h> 
#include <io.h> 
#include <Windows.h>

int i, j, height = 20, width = 20;
int gameover, score;
int x, y, fruitx, fruity, flag;
int tailX[100], tailY[100];
int length;
int choose_map;
int width_rand[11];
int height_rand[11];

// Function to generate the fruit 
// within the boundary 
void setup()
{
    gameover = 0;
    x = height / 2;
    y = width / 2;

    length = 0;

    fruitx = 0;
    while (fruitx == 0) {
        fruitx = rand() % 20;
    }

    fruity = 0;
    while (fruity == 0) {
        fruity = rand() % 20;
    }

    score = 0;
}

// Function to draw the boundaries 
void draw_map1() {
    system("cls");
    for (i = 0; i < height; i++) {
        for (j = 0; j < width; j++) {
            if (i == 0 || i == width - 1 || j == 0 || j == height - 1 || (j == height / 2)) {
                if (j == height / 2 && ((i > 0 && i < 4) || (i > width - 5 && i < width - 1))) {
                    printf(" ");
                    continue;
                }
                printf("#");
            }
            else {
                int isSnakePart = 0;
                for (int k = 0; k < length; k++) {
                    if (tailX[k] == i && tailY[k] == j) {
                        printf("□");
                        isSnakePart = 1;
                        break;
                    }
                }

                if (!isSnakePart) {
                    if (i == x && j == y)
                        printf("□");
                    else if (i == fruitx && j == fruity)
                        printf("*");
                    else
                        printf(" ");
                }
            }
        }
        printf("\n");
    }

    printf("score = %d", score);
    printf("\n");
    printf("press X to quit the game");
}

void draw_map2() {

    system("cls");
    for (i = 0; i < height; i++) {
        for (j = 0; j < width; j++) {
            if (i == 0 || i == width - 1 || j == 0 || j == height - 1 || (i == width_rand[i] && j == height_rand[j])) {
                printf("#");
            }
            else {
                int isSnakePart = 0;
                for (int k = 0; k < length; k++) {
                    if (tailX[k] == i && tailY[k] == j) {
                        printf("□");
                        isSnakePart = 1;
                        break;
                    }
                }

                if (!isSnakePart) {
                    if (i == x && j == y)
                        printf("□");
                    else if (i == fruitx && j == fruity)
                        printf("*");
                    else
                        printf(" ");
                }
            }
        }
        printf("\n");
    }

    printf("score = %d", score);
    printf("\n");
    printf("press X to quit the game");
}

void draw_default() {
    system("cls");
    for (i = 0; i < height; i++) {
        for (j = 0; j < width; j++) {
            if (i == 0 || i == width - 1 || j == 0 || j == height - 1) {
                printf("#");
            }
            else {
                int isSnakePart = 0;
                for (int k = 0; k < length; k++) {
                    if (tailX[k] == i && tailY[k] == j) {
                        printf("□");
                        isSnakePart = 1;
                        break;
                    }
                }

                if (!isSnakePart) {
                    if (i == x && j == y)
                        printf("□");
                    else if (i == fruitx && j == fruity)
                        printf("*");
                    else
                        printf(" ");
                }
            }
        }
        printf("\n");
    }

    printf("score = %d", score);
    printf("\n");
    printf("press X to quit the game");
}

// Function to take the input 
void input()
{
    if (_kbhit()) {
        switch (getch()) {
        case 'a':
            flag = 1;
            break;
        case 's':
            flag = 2;
            break;
        case 'd':
            flag = 3;
            break;
        case 'w':
            flag = 4;
            break;
        case 'x':
            gameover = 1;
            break;
        }
    }
}

// Function for the logic behind each movement
void logic()
{
    int prevX = tailX[0];
    int prevY = tailY[0];
    int prev2X, prev2Y;
    tailX[0] = x;
    tailY[0] = y;

    for (int i = 1; i < length; i++) {
        prev2X = tailX[i];
        prev2Y = tailY[i];
        tailX[i] = prevX;
        tailY[i] = prevY;
        prevX = prev2X;
        prevY = prev2Y;
    }

    switch (flag) {
    case 1:
        y--;
        break;
    case 2:
        x++;
        break;
    case 3:
        y++;
        break;
    case 4:
        x--;
        break;
    default:
        break;
    }

    if (x < 0 || x >= height || y < 0 || y >= width)
        gameover = 1;

    for (int i = 0; i < length; i++) {
        if (tailX[i] == x && tailY[i] == y) {
            gameover = 1;
        }
    }

    if (x == fruitx && y == fruity) {

        fruitx = 0;
        while (fruitx == 0) {
            fruitx = rand() % 20;
        }

        fruity = 0;
        while (fruity == 0) {
            fruity = rand() % 20;
        }

        score += 10;
        length++;
    }
}

void lobby() {
    int order;

    printf("로비 입니다.\n");
    printf("맵 변경 1번, 랭킹 2번, 시작 3번 : ");
    scanf_s("%d", &order);

    if (order == 1) {
        printf("맵을 선택하세요. (1, 2) : ");
        scanf_s("%d", &choose_map);
    }
    else if (order == 2) {
        printf("미구현");
    }
    else if (order == 3) {
        printf("start");
    }
    else {
        printf("잘못된 입력입니다.\n");
        return 0;
    }
}

void mode() {

}

void main()
{
    int k = 0;

    srand(time(NULL));

    while(k<=10) {
        if (width_rand[k] == width || height_rand[k] == height){
            continue;
        }
        else {
            width_rand[k] = rand() % width;
            height_rand[k] = rand() % height;
            k++;
        }
    }

    lobby();

    mode();

    setup();

    if (choose_map == 1) {
        while (!gameover) {
            draw_map1();
            input();
            logic();
            Sleep(100);
        }
    }
    else if (choose_map == 2) {
        while (!gameover) {
            draw_map2();
            input();
            logic();
            Sleep(100);
        }
    }
    else {
        while (!gameover) {
            draw_default();
            input();
            logic();
            Sleep(100);
        }
    }
}
